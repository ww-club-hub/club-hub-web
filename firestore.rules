rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    function student(schoolId) {
      return request.auth.token.email_verified && request.auth.token.school == schoolId;
    }
    function admin() {
      return request.auth.token.role == "owner" || request.auth.token.role == "admin";
    }
    // check if the user is an officer of this club and the specified permission bit is set
    // see schema.ts for more info
    function officer(clubId, permissionBit) {
      // basically (officerOf[clubId] & (1 << permissionBit)) != 0
      return clubId in request.auth.token.officerOf && debug(int(debug(debug(request.auth.token.officerOf[clubId]) / math.pow(2, permissionBit)))) % 2 == 1;
    }
    function member(clubId) {
      return admin() || ("officerOf" in request.auth.token && clubId in request.auth.token.officerOf) || clubId in request.auth.token.memberOf;
    }
    function onlyChanged(keys) {
      return debug(request.resource.data.diff(resource.data).affectedKeys()).hasOnly(keys);
    }
    function listDiffHasOnly(list1, list2, targetDiff) {
      let set1 = list1.toSet();
      let set2 = list2.toSet();
      return set1.difference(set2).hasOnly(targetDiff) && set2.difference(set1).hasOnly(targetDiff);
    }
    function mapDiffHasOnly(map1, map2, targetKey, targetValue) {
      let diff = debug(map1.diff(map2));
      return debug(diff.affectedKeys()) == debug([targetKey].toSet()) && diff.addedKeys() == [targetKey].toSet() && debug(map1)[targetKey] == targetValue;
    }
    match /user_data/{user_id} {
      // token can only be refreshed on the backend (requires OAuth client secret)
      // allow read: if request.auth.token.uid == user_id;
      // allow write: if request.auth.token.uid == user_id && request.resource.data.keys().hasOnly(["drive_refresh_token"]);

    }
    match /schools/{school_id} {
      // schools can only be created/deleted from the admin API
      allow read: if student(school_id);
      // Members/admins/owner updates can only be done through the admin API (requires changing roles)
      allow update: if student(school_id) && admin() && onlyChanged(["name", "website", "domainRestriction"]);

      match /clubs/{club_id} {
        // stuco can create, edit, and delete
        allow delete: if admin() && student(school_id);
        allow create: if admin() && student(school_id) &&
          request.resource.data.keys().toSet() == ["name", "description", "contact", "signup"].toSet();
        // officers can edit fields (permission bit 5 - ClubDetails)
        allow update: if student(school_id) && (admin() || officer(club_id, 5)) &&
          onlyChanged(["name", "description", "contact", "logoUrl", "topics", "meetings", "signup"]);
        // signup.type == 0 indicates private
        allow read: if student(school_id) && (("signup" in resource.data && resource.data.signup.type != 0) || request.auth.token.email.toUtf8().toBase64() in resource.data.officers || admin());

        match /messages/{message_id} {
          // permission bit 3 - Messages
          allow create: if student(school_id) && officer(club_id, 3) && request.resource.data.keys().hasOnly(["creator", "description", "links", "timestamp", "title"]) && request.resource.data.creator == request.auth.token.email;
          allow read: if student(school_id) && member(club_id);
        }

        match /meetings/{meeting_id} {
          // permission bit 2 - Meetings
          allow create: if student(school_id) && officer(club_id, 2) && request.resource.data.keys().hasOnly(["location", "startTime", "endTime", "description", "slides"]) && request.resource.data.keys().hasAll(["location", "startTime", "endTime"]);
          allow update: if student(school_id) && officer(club_id, 2) && onlyChanged(["description", "slides"]);
          allow read: if student(school_id) && member(club_id);
        }

        match /meeting_attendance/{meeting_id} {
          // permission bit 2 - Meetings
          // officers must initialize membersPresent and membersAttending
          allow create: if student(school_id) && officer(club_id, 2) && request.resource.data.keys().toSet() == ["code", "membersPresent", "membersAttending"].toSet() && request.resource.data.membersPresent == {} && request.resource.data.membersAttending == [];
          allow read: if student(school_id) && officer(club_id, 2);
          // officers can only update code
          allow update: if student(school_id) && officer(club_id, 2) && onlyChanged(["code"]);
          // members can add/remove themselves from membersAttending
          allow update: if student(school_id) && member(club_id) && onlyChanged(["membersAttending"]) && listDiffHasOnly(request.resource.data.membersAttending, resource.data.membersAttending, [request.auth.token.email]);
          // members can add themselves to membersPresent if they have the correct code
          allow update: if student(school_id) && member(club_id) && onlyChanged(["membersPresent"]) && mapDiffHasOnly(request.resource.data.membersPresent, resource.data.membersPresent, request.auth.token.email, resource.data.code);
        }

        match /forms/{form_id} {
          allow read: if student(school_id) && member(club_id);
          // permission bit 4 - forms
          allow create: if student(school_id) && officer(club_id, 4) && request.resource.data.keys().toSet() == ["formId", "description", "officerId"].toSet() && request.resource.data.officerId == request.auth.uid;
          allow delete: if student(school_id) && officer(club_id, 4);
          allow update: if student(school_id) && officer(club_id, 4) && onlyChanged(["description"]);
        }
      }

      match /clubs_private/{club_id} {
        // permission bit 1 - Members
        allow read: if student(school_id) && officer(club_id, 1);
        // can only be written by backend
      }

    }
  }
}
